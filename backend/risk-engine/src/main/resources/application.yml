server:
  port: 8080
  servlet:
    context-path: /api/v1

spring:
  application:
    name: risk-engine-service

  # 数据源配置
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/web3_risk_db
    username: web3_user
    password: web3_password
    type: com.alibaba.druid.pool.DruidDataSource
    
    # Druid连接池配置
    druid:
      initial-size: 5
      min-idle: 5
      max-active: 20
      max-wait: 60000
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 1
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      filters: stat,wall,slf4j
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

  # JPA配置
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 50
        order_inserts: true
        order_updates: true

  # Redis配置
  data:
    redis:
      host: localhost
      port: 6379
      password:
      database: 0
      timeout: 5000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms

  # Kafka配置
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: risk-engine-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.web3.risk.dto"
        spring.json.type.mapping: "transaction:com.web3.risk.dto.TransactionDto,block:com.web3.risk.dto.BlockDto,alert:com.web3.risk.dto.AlertDto"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: 1
      retries: 3
    listener:
      ack-mode: manual_immediate

  # 缓存配置
  cache:
    type: redis
    redis:
      time-to-live: 3600000  # 1小时

  # Security配置
  security:
    user:
      name: admin
      password: admin123
      roles: ADMIN

# 管理端点配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,kafka
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true

# 日志配置
logging:
  level:
    com.web3.risk: DEBUG
    org.springframework.kafka: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/risk-engine.log

# API文档配置
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
  packages-to-scan: com.web3.risk.controller

# 自定义配置
risk-engine:
  # 风险评估配置
  assessment:
    high-value-threshold: 1000000000000000000000  # 1000 ETH in wei
    batch-size: 100
    parallel-processing: true
    max-processing-time: 30000  # 30秒
    
  # 规则引擎配置
  rules:
    reload-interval: 300000  # 5分钟
    cache-enabled: true
    cache-ttl: 1800000  # 30分钟
    
  # 黑名单配置
  blacklist:
    auto-update: true
    update-interval: 600000  # 10分钟
    external-sources:
      - "https://api.blocksec.com/v1/blacklist"
      - "https://api.chainalysis.com/v1/sanctions"
    
  # 告警配置
  alert:
    enabled: true
    immediate-levels: ["CRITICAL", "HIGH"]
    batch-levels: ["MEDIUM", "LOW"]
    batch-interval: 60000  # 1分钟
    
  # 性能配置
  performance:
    thread-pool-size: 20
    queue-capacity: 1000
    keep-alive-time: 60
    
# Kafka主题配置
kafka:
  topics:
    transactions: blockchain-transactions
    blocks: blockchain-blocks
    alerts: risk-alerts
    risk-scores: risk-scores